// возвращает номер позиции на которой needle расположена внутри haystack
// или -1 если ничего не найдено

int rabin_karp(const char* needle, const char* haystack)
{
	unsigned n, target, cur, count = 0, left = 0, right = strlen(needle);
	int check = 0;
	unsigned i, length;
	length = right;


	target = get_hash(needle, needle + right);
	cur = get_hash(haystack, haystack + right);
	n = pow_mod(R, right - 1, Q);

	while ((check == 0) && haystack[right] != 0) 
	{
		if (target == cur)
		{
			check = 1;
			for (i = 0; i < length; i++)
			{
				if (needle[i] != haystack[left + i])
					check = 0;
			}
			if (check == 1)
				return left;
		}
		cur = update_hash(cur, n, haystack[left], haystack[right]);
		left += 1;
		right += 1;
	}
		return -1;
}
